using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Data;
using System.Data.OleDb;
using System.IO;

namespace ExcelConnect
{


    public class WorkSheet : DataTable
    {
        private Boolean schemaDefined = false;
        private String keyName = "rowNumber";
        private String sheetName;
        private OleDbCommand updateCmd = new OleDbCommand();
        private OleDbCommand selectCmd = new OleDbCommand();
        private OleDbCommand deleteCmd = new OleDbCommand();
        private static Excel ActiveSheet = null;

        /*
         * sheetname header keyname
         * sheetname header keyname activesheet
         * sheetname header filename keyname
         * 
         * 
         * sheetName                                        File has already been loaded, do not define a schema                    string
         * sheetName header [keyName]                       File has already been loaded, do define a schema                        string array / string array string
         * sheetName fileName                               Load file, do not define a schema                                       string string
         * sheetName fileName header [keyName]              Load file, do define a schema                                           string string array / string string array string
         * sheetName activeSheet                            Here's the loaded file, do not define a schema                          string sheet
         * sheetName activeSheet header [keyName]           Here's the loaded file, do define a schema                              string sheet array / string sheet array string
         * 
         * sheetName ==> sheetName activesheet ==> where activeSheet is the static private variable
         * sheetName fileName ==> open sheet, then sheetName activeSheet
         * sheetName activeSheet ==> Define static private variable
         * 
         * sheetName header [keyName] ==> sheetName activesheet header [keyName] 
         
         */

        public WorkSheet(String sheetName, String[] header = null, String keyName = "") 
            : this (
                sheetName: sheetName,
                activeSheet: WorkSheet.ActiveSheet,
                header: header,
                keyName: keyName)
        {
                    if (null == WorkSheet.ActiveSheet)
                    {
                        throw new Exception("Error - No Spreadsheet file specified. Unable to proceed");
                    }
        }

        public WorkSheet(String sheetName, String fileName, String[] header = null, String keyName = "")
            : this (
                sheetName: sheetName,
                activeSheet: WorkSheet.ActiveSheet,
                header: header,
                keyName: keyName)
        {
            if (null == WorkSheet.ActiveSheet)
            {
                this.sheetName = sheetName; // Worksheet name specified should be stored internally
                switch (Path.GetExtension(fileName).ToLower())
                {
                    case ".xls":
                        WorkSheet.ActiveSheet = new Excel(fileName, Excel.format.Excel8);
                        break;
                    case ".xlsx":
                        WorkSheet.ActiveSheet = new Excel(fileName, Excel.format.Excel12);
                        break;
                    case ".csv":
                        this.sheetName = Path.GetFileName(fileName); //With CSV files, the sheetname has to be the filename
                        WorkSheet.ActiveSheet = new Excel(fileName, Excel.format.CSV);
                        break;
                }
            }
        }

        //XYZZY still a bit to do
        // need to figure out if the table still exists
        // get the header if it does
        // create a new table if it doesn't
        // probably add/remove [square brackets] as needed
        // add table to the dataset/activesheet also
        // And make sure 'accept changed' also includes Update()
        // Also need to DEFINE select/update/delete
        // And get Fill() to work correctly 
        //
        // Usage I envision:
        // SPL = New SpreadSheetLink(FILENAME)
        // WSH = New WorkSheet(SPL , WORKSHEETNAME) ==> change the way I deal with the data so it feels more like a list/array/associative array/etc.
        // WSH.AddData ==>  Perhaps ask the object to give me an associative array.  Then manipulate the assocarray as I want, and then feed it back when I'm "saving" it
        // WSH.AcceptChanges  ==> Could also have a static function that says "load an associtive array" and could just instantiate the table if it doesn't exist, and give me a blank dictionary
        //                  ==> Then also have a static function "save" which would of course do the update() and accept changes!
        //
        // then see about encapsulating further to load/save an associative array
        // Or Create an object with a Load() and Save) method instead of SpreadsheetLink() method
        //
        public WorkSheet(String sheetName, Excel activeSheet, String[] header = null, String keyName = "") : base(sheetName)
        {
            sheetName = sheetName.Replace("[","").Replace("]","").Replace("$",""); // Remove Excelisms if they were included
            // If worksheet already exists - grab the schema - CONNECTION.GetOleDbSchemaTable
            // If worksheet doesn't already exist, do a 'CREATE TABLE' based on this: http://forums.devx.com/showthread.php?169318-Excel-OLEDB-Create-Table-Issue
            if (null == header)
            {

            } else {
                initTable(header, keyName);  // XYZZY Load header if the table alrady exists
            }
            defineCommands(); // use internal keyname
        }

        private void defineCommands() {
            // Now define: updateCmd selectCmd deleteCmd 
            // Use this.keyname
            this.selectCmd.CommandText = "SELECT * FROM " + this.sheetName;
            if (!schemaDefined)
            {
                throw new Exception("Unable to establish Insert/Delete commands because no schema has been defined");
            }
        }

        public void initTable (String[] header, string keyName)
        {
            DataColumn column = new DataColumn("rowNumber", System.Type.GetType("int"));
            column.Unique = true;
            column.AutoIncrement = true;
            column.AutoIncrementSeed = 1;
            column.AutoIncrementStep = 1;
            this.Columns.Add(column);

            if (keyName != "")
            {
                column = new DataColumn(keyName, System.Type.GetType("String"));
                column.Unique = true;
                column.AllowDBNull = true;
                this.keyName = keyName;
                this.Columns.Add(column);
            }

            foreach (string colName in header)
            {
                column = new DataColumn(colName, System.Type.GetType("String"));
                column.Unique = false;
                column.AllowDBNull = true;
                this.Columns.Add(colName);
            }
            this.schemaDefined = true;
        }

        public new void AcceptChanges()
        {
            // Save to Excel
            base.AcceptChanges();
        }

    }


    public class Excel : DataSet
    {
        private OleDbConnection conn = new OleDbConnection();
        private OleDbDataAdapter excelLink = new OleDbDataAdapter();
        private DataTable dbSchema;
        public enum format
        {
            Excel8 = 0,
            Excel12,
            CSV
        }

        public Excel(String fileName, format FileType ) : base(Path.GetFileName(fileName))
        {
            /*
             $cs = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=D:\\";
            $select = "SELECT * FROM D:\test.csv"
            $conn= New-Object System.Data.OleDb.OleDbConnection($cs)
            $conn.open()
            $cmd=new-object system.data.oledb.oledbcommand($select,$conn)
            $da = New-Object system.Data.OleDb.OleDbDataAdapter($cmd)
            $dt = New-Object system.Data.datatable
            [void]$da.fill($dt)
            $conn.Close()
*/
            this.fileName = fileName;
            
            String[] csHeader = new String[] {
                "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=",
                "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=",
                "Provider=Microsoft.ACE.OLEDB.12.0; Data Source="
            };

            String[] csSource = new String[] {
                fileName,
                fileName,
                Path.GetDirectoryName(fileName)
            };

            String[] csFooter = new String[]{
                ";Mode=ReadWrite;Extended Properties='Excel 12.0 XML;HDR=YES'",
                ";Extended Properties='Excel 8.0'",
                ";Extended Properties='Text;HDR=NO;IMEX=1'"};

            int csIndex = (int)FileType;
            conn = new OleDbConnection(csHeader[csIndex] + csSource[csIndex] + csFooter[csIndex]);
            conn.Open();
            this.DataSetName = fileName;
            dbSchema = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, new object[] { null, null, null, null });
    }

        private String fileName; 
        public String FileName
        {
            get
            {
                return this.fileName;
            }
        }
        private OleDbCommand selectCommand = new OleDbCommand();
        public OleDbCommand SelectCommand
        {
            get
            {
                return selectCommand;
            }
            set
            {
                selectCommand = value;
                excelLink.SelectCommand = value;
            }
        }

        private OleDbCommand updateCommand = new OleDbCommand();
        public OleDbCommand UpdateCommand
        {
            get
            {
                return updateCommand;
            }
            set
            {
                updateCommand = value;
                excelLink.UpdateCommand = value;
            }
        }

        private OleDbCommand deleteCommand = new OleDbCommand();
        public OleDbCommand DeleteCommand
        {
            get
            {
                return deleteCommand;
            }
            set
            {
                deleteCommand = value;
                excelLink.DeleteCommand = value;
            }
        }

        public int Fill(WorkSheet destination)
        {
            return excelLink.Fill((DataTable) destination);
        }

        public int Update()
        {
           return excelLink.Update(this);
        }

        public int Update(WorkSheet singleSheet)
        {
            return excelLink.Update((DataTable)singleSheet);
        }

        public bool closeLink()
        {
            bool closedOK = false;
            try
            {
                conn.Close();
                closedOK = true;
            }
            catch
            {
                closedOK = false;
            }
            return closedOK;
        }
        
    }
    // Establish a grid with named columns

    // Update grid by modifying rows
    // Write to Excel

    // Set values
    // Write to Excel

    // Update grid by inserting rows
    // Write to Excel

    // Update grid by deleting rows
    // Write to Excel    

    // Establish a grid with named columns
    // Load values from Excel



}
/*
namespace BudgetCal
{
    public partial class Form1 : Form
    {
        //Newer version of Excel - Future
        //       connectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=Clients.xlsx;Extended Properties=""Excel 12.0 Xml;HDR=YES"";";
        //             "UPDATE [Clients$] " + 
 
        String backendConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=c:\\temp\\cuteness.xls; Extended Properties=Excel 8.0;";
        OleDbConnection backendConnection;
        DataSet dataModel;
        OleDbDataAdapter dataInterface;
        public Form1()
        {
            backendConnection = new OleDbConnection(backendConnectionString); 
            chart1.ChartAreas[0].BackColor = Form1.DefaultBackColor;
            chart1.BackColor = Form1.DefaultBackColor;

            dataInterface = new OleDbDataAdapter();
            dataInterface.SelectCommand = new OleDbCommand("SELECT * FROM NAME", backendConnection);

            dataModel = new DataSet();

            //https://msdn.microsoft.com/en-us/library/system.data.oledb.oledbdataadapter.updatecommand%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396
            //
            // http://stackoverflow.com/questions/10535663/how-do-i-update-excel-file-with-oledbdataadapter-updatemydataset
            //
            //
            dataInterface.Fill(dataModel, "XLData");

            OleDbCommand updateCmd = new OleDbCommand("UPDATE NAME Set name = ? WHERE animal = ?", backendConnection);
            updateCmd.Parameters.Add("name",OleDbType.Char,20,"name");
            updateCmd.Parameters.Add("animal",OleDbType.Char,20,"animal");
            dataInterface.UpdateCommand = updateCmd;
            DataRow drCurrent = dataModel.Tables["XLData"].Rows[0];
//            drCurrent.BeginEdit();
            drCurrent["name"] = "Harmony";
 //           drCurrent.EndEdit();
//            drCurrent.AcceptChanges();
//            dataModel.Tables["XLData"].Rows[0] = drCurrent;

   //         dataModel.Tables["XLData"].Rows[0].BeginEdit();
 //           dataModel.Tables["XLData"].Rows[0]["name"] = "Harmony";
   //         dataModel.Tables["XLData"].Rows[0].EndEdit();
     //       dataModel.Tables["XLData"].AcceptChanges();
//            dataModel.AcceptChanges();
            dataInterface.Update(dataModel, "XLData"); //daAuthors.Update(dsPubs, "Authors");

            backendConnection.Close();
            // externalSheet.DataSource = dataSet1.Tables[0].DefaultView;

        }

        private void monthCalendar1_DateChanged(object sender, DateRangeEventArgs e)
        {
                processDate();
        }


        private void monthCalendar1_DateSelected(object sender, DateRangeEventArgs e)
        {
            processDate();
        }

        private void processDate()
        {
            if (monthCalendar1.SelectionStart.ToShortDateString() == monthCalendar1.SelectionEnd.ToShortDateString())
            {
                showExpenses();
            }
        }


        private void button1_Click(object sender, EventArgs e)
        {
            hideExpenses();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            hideExpenses();
        }

        private void showExpenses()
        {
            label1.Visible = true;
            label2.Visible = true;
            label3.Visible = true;
            button1.Visible = true;
            button2.Visible = true;
            button3.Visible = true;
            panel1.Visible = true;
            comboBox1.Visible = true;
            label1.Text = monthCalendar1.SelectionStart.ToShortDateString();
        }

        private void showInstructions()
        {
            label1.Text = "Please select a date to view its transactions";
        }

        private void bigLabel()
        {
            label1.Font = new Font(label1.Font.FontFamily, label1.Font.Size * 2);
        }

        private void hideExpenses()
        {
            showInstructions();
            monthCalendar1.Visible = true;
            label1.Visible = true;
            label2.Visible = false;
            label3.Visible = false;
            button1.Visible = false;
            button2.Visible = false;
            button3.Visible = false;
            panel1.Visible = false;
            comboBox1.Visible = false;
            monthCalendar1.Height = 1;
            monthCalendar1.Width = 1;
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            trackBar1.Visible = checkBox1.Checked;
            label4.Visible = checkBox1.Checked;
        }


    }
}

*/